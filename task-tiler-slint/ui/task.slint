import { TimeFormat } from "./timeformat.slint";
import { ListView } from "std-widgets.slint";

enum TaskState {
    started,
    stopped
}

component TaskButton inherits Rectangle {
    in property <int> spent;
    in property <int> allot;
    in property <TaskState> state;
    callback clicked <=> touch.clicked;

    HorizontalLayout {
        spacing: 16px;
        Rectangle {
            width: 56px;
            height: 40px;
            background: touch.pressed ? #353535 : touch.has-hover ? #757575 :  #959595;
            Text {
                font-size: 16px;
                text: state == TaskState.started ? "Stop" : "Start";
            }
            touch := TouchArea { }
        }

        TimeFormat {
            overflow: elide;
            visible: parent.width > 165px;
            vertical-alignment: TextVerticalAlignment.center;
            spent: spent;
            allot: allot;
            font-size: 10px;
        }
    }
}

@rust-attr(derive(serde::Serialize, serde::Deserialize))
enum CheckBoxState {
    none,
    todo,
    doing,
    done
}

export struct InfoStruct {
    info: string,
    tabs: string,
    checkbox: CheckBoxState
}

export struct TaskStruct {
    title: string,
    color: color,
    abbr: string,
    info: [InfoStruct],
    blocks: float,
    spent: float,
    allot: int,
    idx: [int],
    started: bool
}

component CheckBox inherits Rectangle {
    in-out property <bool> checked;
    in property <brush> check-color;
    in property <brush> box-color;

    HorizontalLayout {
        Rectangle {
            border-color: box-color;
            border-radius: 2px;
            border-width: 1px;
            HorizontalLayout {
                padding: 2px;
                Image {
                    colorize: check-color;
                    source: @image-url("images/check.svg");
                    opacity: root.checked ? 1.0 : 0;
                }    
            }
        }
    }
}

export component Task inherits Rectangle {
    in-out property <TaskStruct> task;
    callback clicked <=> touch.clicked;
    callback button_clicked <=> button.clicked;
    border-radius: 4px;
    border-width: 0px;
    background: task.color;
    preferred-height: 160px;
    preferred-width: 120px * task.blocks;
    min-width: 120px;
        
    touch := TouchArea{ }
        
    VerticalLayout {
        spacing: 8px;
        padding: 8px;
        alignment: stretch;
        Text {
            min-width: 64px;
            text: task.title;
            font-size: 24px;
            color: #000;
        }
        infoview := Rectangle {
            border-radius: 4px;
            background: task.color.darker(0.1);
            HorizontalLayout {
                padding-top: 4px;
                padding-left: 4px;
                padding-right: 2px;
                ListView {
                    min-height: 16px;
                    for info in task.info : 
                        HorizontalLayout {
                            alignment: start;
                            Text {
                                text: info.tabs;
                            }
                            VerticalLayout {
                                alignment: start;
                                padding-right: 4px;
                                if info.checkbox == CheckBoxState.todo || info.checkbox == CheckBoxState.done :
                                    CheckBox {
                                        height: 12px;
                                        width: 12px;
                                        checked: info.checkbox == CheckBoxState.done;
                                        check-color: infoview.background.darker(0.9);
                                        box-color: infoview.background.darker(0.6);
                                    }
                                // TODO handle doing state
                            }
                            Text {
                                text: info.info;
                                wrap: word-wrap;
                            }
                        }
                }
            }
        }
        TimeFormat {
            height: self.width < 165px ? self.preferred-height : 0px;
            overflow: elide;
            spent: task.spent;
            allot: task.allot;
            font-size: 10px;
        }
        button := TaskButton {
            state: task.started ? TaskState.started : TaskState.stopped;
            spent: task.spent;
            allot: task.allot;
        }
    }
}
