import { TimeFormat } from "./timeformat.slint";
import { ScrollView } from "std-widgets.slint";

enum TaskState {
    started,
    stopped
}

component TaskButton inherits Rectangle {
    in property <int> spent;
    in property <int> allot;
    in property <TaskState> state;
    callback clicked <=> touch.clicked;
    HorizontalLayout {
        spacing: 16px;
        Rectangle {
            width: 56px;
            height: 40px;
            background: touch.pressed ? #353535 : touch.has-hover ? #757575 :  #959595;
            Text {
                font-size: 16px;
                text: state == TaskState.started ? "Stop" : "Start";
            }
            touch := TouchArea { }
        }
        
        timeText := TimeFormat {
            vertical-alignment: TextVerticalAlignment.center;
            spent: spent;
            allot: allot;
            font-size: 10px;
        }
    }
}

export struct TaskStruct {
    title: string,
    color: color,
    abbr: string,
    info: string,
    blocks: float,
    spent: float,
    allot: int,
    idx: [int],
    started: bool
}

export component Task inherits Rectangle {
    in-out property <TaskStruct> task;
    callback clicked <=> touch.clicked;
    callback button_clicked <=> button.clicked;
    border-radius: 4px;
    border-width: 0px;
    background: task.color;
    preferred-height: 160px;
    preferred-width: 120px * task.blocks;
        
    touch := TouchArea{ }
    
    info_background := Rectangle {
        border-radius: 4px;
        x: info.x - 2px;
        y: info.y - 2px;
        width: info.width + 4px;
        height: info.height + 4px;
        background: task.color.darker(0.1);
    }
    
    VerticalLayout {
        spacing: 8px;
        padding: 8px;
        txt := 
            Text {
                min-width: 64px;
                text: task.title;
                font-size: 24px;
                color: #000;
            }
        info := ScrollView {
            min-height: 16px;
            padding-bottom: 8px;
            viewport-height: inner.height;
            inner := Text {
                x: 0;
                y: 0;
                width: parent.width;
                text: task.info;
                wrap: word-wrap;
            }}
        button := TaskButton {
            state: task.started ? TaskState.started : TaskState.stopped;
            spent: task.spent;
            allot: task.allot;
        }
    }
}
