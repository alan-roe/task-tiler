import { Task, TaskStruct } from "./task.slint";
import "./../CourierPrime-Regular.ttf";

export { Task, TaskStruct }

export component AppWindow inherits Window {
    out property<bool> show_info: false;
    out property<bool> task_started: false;
    in-out property <[int]> active_task;
    in-out property <[int]> selected_task;
    in-out property <[[TaskStruct]]> tasks: [];
    default-font-family: "Courier Prime";
    preferred-width: 480px;
    preferred-height: 320px;
    min-width: 480px;
    min-height: 320px;
    public function update_time() {
        tasks[active-task[0]][active-task[1]].spent += 1;
    }

    function start_task(idx: [int]) {
        if (root.task-started && root.active-task != idx) {
            toggle-started();
        }
        root.active-task = idx;
        toggle-started();
        root.task-started = tasks[active-task[0]][active-task[1]].started;

    }

    function toggle_started() {
        tasks[active-task[0]][active-task[1]].started = !tasks[active-task[0]][active-task[1]].started;
    }

    VerticalLayout {
        padding: 16px;
        spacing: 8px;
        if show_info: Task {
                task: tasks[selected-task[0]][selected-task[1]];
                clicked => {
                    root.show_info = !root.show_info;
                }
                button-clicked => {
                    start_task(self.task.idx);
                }
            }
        if !show_info:
            HorizontalLayout {
                spacing: 8px;
                for task in tasks[0]:
                    Task {
                        task: task;
                        clicked => {
                            root.selected_task = task.idx;
                            root.show-info = !root.show-info;
                        }
                        button-clicked => {
                            start_task(self.task.idx);
                        }
                    }
            }
        if !show_info:
            HorizontalLayout {
                spacing: 8px;
                for task in (tasks[1]):
                    Task {
                        task: task;
                        clicked => {
                            root.selected_task = task.idx;
                            root.show-info = !root.show-info;
                        }
                        button-clicked => {
                            start_task(self.task.idx);                    }
                    }
            }
    }
}
